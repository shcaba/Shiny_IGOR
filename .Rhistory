df = rbind(df, newRow)
df = data.frame(a=double(),b=double(),c=double())
newRow = data.frame(a=1,b=2,c=NA)
df = rbind(df, newRow)
newRow = data.frame(a=1,b=2,c="NA")
df = rbind(df, newRow)
df = rbind(df, newRow)
is.na(df[1,3])
is.na(df[2,3])
View(opt)
View(obj)
View(opt)
opt$par
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
foo <- data.frame(a=rnorm(10), b=rnorm(10))
foo
foo = format(foo, digits = 1)
foo
runApp()
bar = data.fro
bar = data.frame()
bar
runApp()
foo
newRow = data.frame(a=0.1231234324143, b=0.25459834275897243895)
foo = format(rbind(foo, newRow), digits = 4)
foo
format(foo, digits = 4)
format(foo, digits = 2)
format(foo, digits = 1)
newRow = data.frame(a=0.1231234324143, b=0.25459834275897243895)
newRow = format(newRow, digits = 2)
newRow = format(newRow, digits = 1)
newRow
foo = rbind(foo, newRow)
foo
?data.frame
runApp()
runApp()
runApp()
runApp()
runApp()
?matrix
a = matrix()
a
len = c()
len
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
source('~/Rprojects/IGOR/model_wk2/vbre.R', echo=TRUE)
View(rep)
View(opt)
opt[["par"]]
View(opt)
View(parameters)
source('~/Rprojects/IGOR/model_wk2/vbre.R', echo=TRUE)
View(rep)
sdreport(obj)
rep[1,]
rep[,1]
rep[7,1]
rep[7:264,1]
hist(rep[7:264,1])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?selectizeInput
ncol(fish_re)
runApp()
runApp()
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
p("The checkbox group controls the select input"),
checkboxGroupInput("inCheckboxGroup", "Input checkbox",
c("Item A", "Item B", "Item C")),
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inCheckboxGroup
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
# Can also set the label and select items
updateSelectInput(session, "inSelect",
label = paste("Select input label", length(x)),
choices = x,
selected = tail(x, 1)
)
})
}
shinyApp(ui, server)
}
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
p("The checkbox group controls the select input"),
checkboxGroupInput("inCheckboxGroup", "Input checkbox",
c("Item A", "Item B", "Item C")),
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inCheckboxGroup
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
# Can also set the label and select items
updateSelectInput(session, "inSelect",
label = paste("Select input label", length(x)),
choices = x,
selected = tail(x, 1)
)
})
}
shinyApp(ui, server)
}
?observe
?observeEvent
?seq_len
runApp()
runApp()
?renderUI
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a = c(1, 2, 3)
a
paste0("read", a)
paste("Read", seq_len(ncol(fish_re)))
runApp()
unique(fish_re$Length)
length(unique(fish_re$Length))
length(fish_re$Length)
runApp()
runApp()
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
x =[1:19]
x =c(1:19)
x
?sample
sex = sample(c('F','M'), 20, replace = TRUE, prob = c(0.5, 0.5))
sex
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
View(df)
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
round(-0.4)
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
View(df)
?write.csv()
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
runApp()
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
View(sub_df)
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
x = c('a', 'b', 'c', 'd', 'e')
x = x %in% c('a', 'd')
x
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a = list(a=1, b=2, c=3)
a[[a]]
a[a]
x= list(a=1, b=2, c=3)
x[a]
x[[a]]
x[["a"]]
x[1]
x = list(a= c(1, 2, 3), b=1343)
x[[a]]
x[["a"]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df<-data.frame(x1=c(1:5),y1=c(2.0,5.4,7.1,4.6,5.0),y2=c(0.4,9.4,2.9,5.4,1.1),y3=c(2.4,6.6,8.1,5.6,6.3))
ggplot(data=df,aes(df[,1]))+geom_line(aes(y=df[,2]))+geom_line(aes(y=df[,3]))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dsamp <- diamonds[sample(nrow(diamonds), 1000), ]
(d <- ggplot(dsamp, aes(carat, price)) +
geom_point(aes(colour = clarity)))
d + scale_colour_brewer()
require(graphics)
# A Color Wheel
pie(rep(1, 12), col = rainbow(12))
##------ Some palettes ------------
demo.pal <-
function(n, border = if (n < 32) "light gray" else NA,
main = paste("color palettes;  n=", n),
ch.col = c("rainbow(n, start=.7, end=.1)", "heat.colors(n)",
"terrain.colors(n)", "topo.colors(n)",
"cm.colors(n)"))
{
nt <- length(ch.col)
i <- 1:n; j <- n / nt; d <- j/6; dy <- 2*d
plot(i, i+d, type = "n", yaxt = "n", ylab = "", main = main)
for (k in 1:nt) {
rect(i-.5, (k-1)*j+ dy, i+.4, k*j,
col = eval(parse(text = ch.col[k])), border = border)
text(2*j,  k * j + dy/4, ch.col[k])
}
}
n <- if(.Device == "postscript") 64 else 16
# Since for screen, larger n may give color allocation problem
demo.pal(n)
x = terrain.colors(10, 0.5)
x
runApp()
x = c('a', 'b', 'c')
y = terrain.colors(3, 0.5)
x
y
names(x) = y
x
x = c('a', 'b', 'c')
y = terrain.colors(3, 0.5)
names(y) = x
x
y
runApp()
runApp()
y = terrain.colors(3, 0.5)
y
y = terrain.colors(3, 0.9)
x = terrain.colors(3, 0.5)
x
y
length(x)
runApp()
runApp()
cols = c("Read1" = "#42f4cb", "Read2" = "#f4a941", "Read3" = "#f44188")
cols[["Read1"]]
colors = terrain.colors(length(input$reads_selected))
names(colors) = input$reads_selected
x = c("Read1", "Read2", "Read3")
colors = terrain.colors(3)
names(colors) = x
colors
colors[["Read1"]]
runApp()
runApp()
?quote
runApp()
runApp()
a = "i"
a
a ] i
a = i
paste("", )
b = paste("'", "i", "'", sep="")
b
runApp()
runApp()
runApp()
require(graphics)
# A Color Wheel
pie(rep(1, 12), col = rainbow(12))
##------ Some palettes ------------
demo.pal <-
function(n, border = if (n < 32) "light gray" else NA,
main = paste("color palettes;  n=", n),
ch.col = c("rainbow(n, start=.7, end=.1)", "heat.colors(n)",
"terrain.colors(n)", "topo.colors(n)",
"cm.colors(n)"))
{
nt <- length(ch.col)
i <- 1:n; j <- n / nt; d <- j/6; dy <- 2*d
plot(i, i+d, type = "n", yaxt = "n", ylab = "", main = main)
for (k in 1:nt) {
rect(i-.5, (k-1)*j+ dy, i+.4, k*j,
col = eval(parse(text = ch.col[k])), border = border)
text(2*j,  k * j + dy/4, ch.col[k])
}
}
n <- if(.Device == "postscript") 64 else 16
# Since for screen, larger n may give color allocation problem
demo.pal(n)
runApp()
runApp()
runApp()
runApp()
display.brewer.all
(5)
display.brewer.all(5)
pal <
-
choose_palette
()
pal <-choose_palette()
library("RColorBrewer", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
pal <-choose_palette()
library("colorspace")
pal <-choose_palette()
?brewer.pal
brewer.pal(4, "Set3")
brewer.pal(4, "Greens")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("growthmodels")
library(growthmodels)
growth <- schnute(0:10, 10, 5, .5, .5)
growth
summary(growth)
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
runApp()
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
View(model)
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
View(rep)
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
runApp()
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
runApp()
source('~/Rprojects/IGOR/model_wk2/fakeDataMaker.R', echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
library(growthmodels)
growth <- gompertz(0:10, 10, 0.5, 0.3)
growth
runApp()
runApp()
runApp()
fluidPage(
title = 'MathJax Examples',
withMathJax(),
helpText('An irrational number \\(\\sqrt{2}\\)
and a fraction $$1-\\frac{1}{2}$$'),
helpText('and a fact about \\(\\pi\\):
$$\\frac2\\pi = \\frac{\\sqrt2}2 \\cdot
\\frac{\\sqrt{2+\\sqrt2}}2 \\cdot
\\frac{\\sqrt{2+\\sqrt{2+\\sqrt2}}}2 \\cdots$$'),
uiOutput('ex1'),
uiOutput('ex2'),
uiOutput('ex3'),
uiOutput('ex4'),
checkboxInput('ex5_visible', 'Show Example 5', FALSE),
uiOutput('ex5')
)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
load("_RData")
source('~/Desktop/oto-weight-master/R_functions_segmented_9_22_14.R', echo=TRUE)
load("~/Desktop/oto-weight-master/_RData.gz")
source('~/Desktop/oto-weight-master/Reg_Pred_R_9_22_14.R', echo=TRUE)
Hake.Bps.dat<-Oto.Age.Model.fits(Hake.dat.otos,oto.age.col=c(5,4),sextype="All",Bp.find="T",rngSplit=c(10,300),steppin=10,breakpts)$Data
Hake.dat.otos
Hake.Bps.1<-Oto.Age.Model.fits(Hake.dat.otos,oto.age.col=c(5,4,3),sextype="All",Bp.find="T",rngSplit=list(c(10,300),c(10,300),c(10,300)),steppin=c(1,1,1),lowbreaks=c(0,0,0),jitter=0,one.to.one="F",bps=c(0.2,0.6),quad.fit= "F",add.lengths="F")
Hake.Bps.1<-Oto.Age.Model.fits(Hake.dat.otos,oto.age.col=c(5,4,3),sextype="All",Bp.find="T",rngSplit=list(c(10,300),c(10,300),c(10,300)),steppin=c(1,1,1),lowbreaks=c(0,0,0),jitter=0,one.to.one="F",bps=c(0.2,0.6),quad.fit= "F",add.lengths="F")
Hake.Bps.1
View(Hake.Bps.1)
Hake.Bps.1<-Oto.Age.Model.fits(Hake.dat.otos,oto.age.col=c(5,4,3),sextype="All",Bp.find="T",rngSplit=list(c(10,300),c(10,300),c(10,300)),steppin=c(1,1,1),lowbreaks=c(0,0,0),jitter=0,one.to.one="F",bps=c(0.2,0.6),quad.fit= "F",add.lengths="F")
